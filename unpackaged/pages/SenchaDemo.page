<apex:page >
<apex:form >
	<apex:includeScript value="{!$Resource.extallJS}"/>
	 <apex:stylesheet value="{!URLFOR($Resource.resources, 'css/ext-all.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.DragSelectorCSS)}"/>
    <apex:includeScript value="{!URLFOR($Resource.jquery17)}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.select2, 'select2.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.select2, 'select2.css')}"/>
	 <script type="text/javascript">
		 function ConfirmFeatureDelete(){
	        Ext.Msg.confirm('Confirm', 'Are you sure you want to delete this feature?', function(btn, text){
	            if (btn == 'yes'){
	                //removeFeature(rowId);
	            }
	        });
	    }
		 
	 </script>
	 
	 <script type="text/javascript">
		
	    Ext.Loader.setConfig({
   		enabled: true});

		Ext.Loader.setPath('Ext.ux', '../ux');

		Ext.require([
		    'Ext.selection.CellModel',
		    'Ext.grid.*',
		    'Ext.data.*',
		    'Ext.util.*',
		    'Ext.state.*',
		    'Ext.form.*'
		]);

		if (window.location.search.indexOf('scopecss') !== -1) {
		    // We are using ext-all-scoped.css, so all rendered ExtJS Components must have a
		    // reset wrapper round them to provide localized CSS resetting.
		    Ext.scopeResetCSS = true;
		}

		Ext.onReady(function(){
		    Ext.QuickTips.init();
		 
		    function formatDate(value){
		        return value ? Ext.Date.dateFormat(value, 'M d, Y') : '';
		    }

		    Ext.define('Plant', {
		        extend: 'Ext.data.Model',
		        fields: [
		            // the 'name' below matches the tag name to read, except 'availDate'
		            // which is mapped to the tag 'availability'
		            {name: 'oppID', type: 'string'},
					{name: 'common', type: 'string'},
					{name: 'desc', type: 'string'},
					{name: 'projId', type: 'string'},
					{name: 'status', type: 'string'},
					{name: 'fee',  type: 'float', convert: null,     defaultValue: undefined},
					{name: 'cos',  type: 'float', convert: null,     defaultValue: undefined},
					{name: 'engLab',  type: 'float', convert: null,     defaultValue: undefined},
		            {name: 'botanical', type: 'string'},
		            {name: 'light'},
		            {name: 'price', type: 'float'},
		            // dates can be automatically converted by specifying dateFormat
		            {name: 'availDate', mapping: 'availability', type: 'date', dateFormat: 'm/d/Y'}
		        ]
		    });


		    // create the Data Store
		    var store = Ext.create('Ext.data.Store', {
		        // destroy the store if the grid is destroyed
		        autoDestroy: true,
		        model: 'Plant',
		        proxy: {
		            type: 'ajax',
		            // load remote data using HTTP
		            url: 'plants.xml',
		            // specify a XmlReader (coincides with the XML format of the returned data)
		            reader: {
		                type: 'xml',
		                // records will have a 'plant' tag
		                record: 'plant'
		            }
		        },
		        sorters: [{
		            property: 'common',
		            direction:'ASC'
		        }]
		    });

		    var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
		        clicksToEdit: 1
		    });
			
			function pctChange(val) {
		        if (val > 0) {
		            return '<span style="color:green;">' + val + '%</span>';
		        } else if (val < 0) {
		            return '<span style="color:red;">' + val + '%</span>';
		        }
		        return val;
		    }


		    // create the grid and specify what field you want
		    // to use for the editor at each header.
		    var grid = Ext.create('Ext.grid.Panel', {
		        store: store,
		        columns: [{
		            id: 'oppID',
		            header: 'Opp Id',
		            dataIndex: 'oppID',
		            flex: 1,
		            editor: {
		                allowBlank: false
		            }
		        }, {
		            id: 'common',
		            header: 'Customer',
		            dataIndex: 'common',
		            flex: 1,
		            editor: {
		                allowBlank: false
		            }
		        },{
		            id: 'desc',
		            header: 'Proj Desc',
		            dataIndex: 'desc',
		            flex: 1,
		            editor: {
		                allowBlank: false
		            }
		        },{
		            id: 'projId',
		            header: 'Proj Id',
		            dataIndex: 'projId',
		            flex: 1,
		            editor: {
		                allowBlank: false
		            }
		        },{
		            id: 'status',
		            header: 'Status',
		            dataIndex: 'status',
		            flex: 1,
		            editor: {
		                allowBlank: false
		            }
		        },{
		            id: 'fee',
		            header: 'Fee %',
		            dataIndex: 'fee',
					renderer : pctChange,
		            flex: 1,
		            editor: {
		                allowBlank: false
		            }
		        },{
		            id: 'cos',
		            header: 'COS %',
		            dataIndex: 'cos',
					renderer : pctChange,
		            flex: 1,
		            editor: {
		                allowBlank: false
		            }
		        },{
		            id: 'engLab',
		            header: 'Eng Lab',
		            dataIndex: 'engLab',
		            flex: 1,
		            editor: {
		                xtype: 'numberfield',
		                allowBlank: false,
		                minValue: 0,
		                maxValue: 100000
		            }
		        },
					{
		            header: 'Light',
		            dataIndex: 'light',
		            width: 130,
		            editor: new Ext.form.field.ComboBox({
		                typeAhead: true,
		                triggerAction: 'all',
		                selectOnTab: true,
		                store: [
		                    ['Shade','Shade'],
		                    ['Mostly Shady','Mostly Shady'],
		                    ['Sun or Shade','Sun or Shade'],
		                    ['Mostly Sunny','Mostly Sunny'],
		                    ['Sunny','Sunny']
		                ],
		                lazyRender: true,
		                listClass: 'x-combo-list-small'
		            })
		        }, {
		            header: 'Price',
		            dataIndex: 'price',
		            width: 70,
		            align: 'right',
		            renderer: 'usMoney',
		            editor: {
		                xtype: 'numberfield',
		                allowBlank: false,
		                minValue: 0,
		                maxValue: 100000
		            }
		        }, {
		            header: 'Available',
		            dataIndex: 'availDate',
		            width: 95,
		            renderer: formatDate,
		            editor: {
		                xtype: 'datefield',
		                format: 'm/d/y',
		                minValue: '01/01/06',
		                disabledDays: [0, 6],
		                disabledDaysText: 'Plants are not available on the weekends'
		            }
		        }, {
		            xtype: 'actioncolumn',
		            width:30,
		            sortable: false,
		            items: [{
		                icon: '../shared/icons/fam/delete.gif',
		                tooltip: 'Delete Plant',
		                handler: function(grid, rowIndex, colIndex) {
		                    store.removeAt(rowIndex); 
		                }
		            }]
		        }],
		        selModel: {
		            selType: 'cellmodel'
		        },
		        renderTo: 'editor-grid',
		        width: 900,
		        height: 600,
		        title: 'Admin Rate Editor',
		        frame: true,
		        tbar: [{
		            text: 'Save Changes',
		            handler : function(){
		                // Create a model instance
		                var r = Ext.create('Plant', {
		                    common: 'New Plant 1',
		                    light: 'Mostly Shady',
		                    price: 0,
		                    availDate: Ext.Date.clearTime(new Date()),
		                    indoor: false
		                });
		                store.insert(0, r);
		                cellEditing.startEditByPosition({row: 0, column: 0});
		            }
		        },{
		            text: 'Refresh Editor',
		            handler : function(){
		                // Create a model instance
		                var r = Ext.create('Plant', {
		                    common: 'New Plant 1',
		                    light: 'Mostly Shady',
		                    price: 0,
		                    availDate: Ext.Date.clearTime(new Date()),
		                    indoor: false
		                });
		                store.insert(0, r);
		                cellEditing.startEditByPosition({row: 0, column: 0});
		            }
		        }],
		        plugins: [cellEditing]
		    });

		    // manually trigger the data store load
		    store.load({
		        // store loading is asynchronous, use a load listener or callback to handle results
		        callback: function(){
		            Ext.Msg.show({
		                title: 'Store Load Callback',
		                msg: 'store was loaded, data available for processing',
		                modal: false,
		                icon: Ext.Msg.INFO,
		                buttons: Ext.Msg.OK
		            });
		        }
		    });
		});

</script>
	 
    <div id="editor-grid"></div>
    
	</apex:form>
	
</apex:page>